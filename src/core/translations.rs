use literally::hmap;
use std::collections::HashMap;

use crate::Source;
pub fn return_foods_mapping(source: Source) -> HashMap<String, String> {
    let product_mapping: HashMap<String, String> = hmap! {
    "Codico de Barra" => "barcode",
    "Descripcion" =>"description",
    "Rubro" =>"rubro",
    "Observaciones" =>"observaciones",
    "Presentacion/g" =>"presentacion",
    "BaseDeMedida/g" =>"base_de_medida",
    "Valor Energetico/Kcal" =>"valor_energetico_kcal",
    "Valor Energetico/KJ" =>"valor_energetico_kj",
    "Valor Energetico/%VD" =>"valor_energetico_vd",
    "Proteinas/g" =>"proteinas_g",
    "Proteinas/%VD" =>"proteinas_vd",
    "Fibra Alimentaria/g" =>"fibra_alimentaria_g",
    "Fibra Alimentaria/%VD" =>"fibra_alimentaria_vd",
    "Vitamina/ug" =>"vitaminas_ug",
    "Vitamina/%VD" =>"vitaminas_vd",
    "Vitamina A/ug" =>"vitamina_a_ug",
    "Vitamina A/%VD" =>"vitamina_a_vd",
    "Tiamina o Vitamina B1/mg" =>"tiamina_mg",
    "Tiamina o Vitamina B1/%VD" =>"tiamina_vd",
    "Rivoflavina o Vit. B2/mg" =>"riboflavina_mg",
    "Rivoflavina o Vit. B2/%VD" =>"riboflavina_vd",
    "Niacina o Vit. B3/mg" =>"niacina_mg",
    "Niacina o Vit. B3/%VD" =>"niacina_vd",
    "Piridoxina o Vit. B6/mg" =>"pridoxina_mg",
    "Piridoxina o Vit. B6/%VD" =>"pridoxina_vd",
    "Vitamina B12/ug" =>"b12_ug",
    "Vitamina B12/%VD" =>"b12_vd",
    "Vitamina C/mg" =>"vitamina_c_mg",
    "Vitamina C/%VD" =>"vitamina_c_vd",
    "Vitaminas E_Tocoferol/mg" =>"tocoferol_mg",
    "Vitaminas E_Tocoferol/%VD" =>"tocoferol_vd",
    "Ac.folico/ug" =>"folico_ug",
    "Ac.folico/%VD" =>"folico_vd",
    "Potasio/mg" =>"potasio_mg",
    "Potasio/%VD" =>"potasio_vd",
    "Calcio/mg" =>"calcio_mg",
    "Calcio/%VD" =>"calcio_vd",
    "Magnesio/mg" =>"magnesio_mg",
    "Magnesio/%VD" =>"magnesio_vd",
    "Hierro/mg" =>"hierro_mg",
    "Hierro/%VD" =>"hierro_vd",
    "Zinc/mg" =>"zinc_mg",
    "Zinc/%VD" =>"zinc_vd",
    "Fósforo/mg" =>"fosforo_mg",
    "Fósforo/%VD(2000 Kcal)" =>"fosforo_vd",
    "Grano entero/Oz" =>"grano_entero_oz",
    "Grano entero/%VD(2000 Kcal)" =>"grano_entero_vd",
    "Vegetales/cup" =>"vegetales_cup",
    "Vegetales/%VD" =>"vegetales_vd",
    "Frutas/cup" =>"frutas_cup",
    "Frutas/%VD" =>"frutas_vd",
    "Dairy/cup" =>"dairy_cup",
    "Dairy/%VD" =>"dairy_vd",
    "Nueces&Semillas/Oz" =>"nueces_semillas_oz",
    "Nueces&Semillas/%VD" =>"nueces_semillas_vd",
    "Sal/g" =>"sal_g",
    "Sal/%VD" =>"sal_vd",
    "Gluten free" =>"gluten_free",
    "T.A.C.C. free" =>"tacc_free",
    "Organico" =>"organico",
    "Organico_InfoToReport" =>"organico_info_to_report",
    "Sodio/mg" =>"sodio_mg",
    "Sodio/%VD" =>"sodio_vd",
    "Fluor/mg" =>"fluor_mg",
    "Fluor/%VD" =>"fluor_vd",
    "Carbohidratos totales/g" =>"carbohidratos_totalesù_g",
    "Carbohidratos totales/%VD" =>"carbohidratos_totales_vd",
    "Azúcares Monosacáridos/g" =>"monosacaridos_g",
    "Azúcares Monosacáridos/%VD" =>"monosacaridos_vd",
    "Azucar Organica" =>"azucar_organica",
    "Grasas totales/g" =>"grasas_totales_g",
    "Grasas totales/%VD" =>"grasas_totales_vd",
    "Grasas saturadas/g" =>"grasas_saturadas_g",
    "Grasas saturadas/%VD" =>"grasas_saturadas_vd",
    "Grasas trans/g" =>"grasas_trans_g",
    "Grasas trans/%VD" =>"grasas_trans_vd",
    "Grasas monoinsaturadas/g" =>"grasas_monoinsaturadas_g",
    "Grasas monoinsaturadas/%VD" =>"grasas_monoinsaturadas_vd",
    "Grasas poli-insaturadas/g" =>"grasas_poliinsaturadas_g",
    "Grasas poli-insaturadas/%VD" =>"grasas_poliinsaturadas_vd",
    "Colesterol/mg" =>"colesterol_mg",
    "Colesterol/%VD" =>"colesterol_vd",
    "Ingredientes" =>"ingredientes",
    "Porción" =>"porcion",
    "Regulaciones" =>"regulaciones",
    "PACKAGING_Tipo" =>"packaging",
    "PACKAGING_InfoToReport" =>"packaging_info_to_report",
    "CONSUMPTION FACTOR (CF)" =>"consumption_factor",
    "TamaÃ±o letra etiquetas" =>"tamanio_letra",
    "Aditivo 1" =>"aditivo_1",
    "Aditivo 2" =>"aditivo_2",
    "Aditivo 3" =>"aditivo_3",
    "Aditivo 4" =>"aditivo_4",
    "Aditivo 5" =>"aditivo_5",
    "Aditivo 6" =>"aditivo_6",
    "Aditivo 7" =>"aditivo_7",
    "Aditivo 8" =>"aditivo_8",
    "Aditivo 9" =>"aditivo_9",
    "Aditivo 10" =>"aditivo_10",
    "Aditivo 11" =>"aditivo_11",
    "Aditivo 12" =>"aditivo_12",
    "Aditivo 13" =>"aditivo_13",
    "Aditivo 14" =>"aditivo_14",
    "Aditivo 15" =>"aditivo_15",
    "Aditivo 16" =>"aditivo_16",
    "Aditivo 17" =>"aditivo_17",
    "Aditivo 18" =>"aditivo_18",
    "Aditivo 19" =>"aditivo_19"
    };
    let ingredient_mapping: HashMap<String, String> = hmap! {"Source" =>"source",
        "" => "test",
        "Name" =>"name",
        "DDR." =>"ddr",
        "Toxicity (aditivos-alimentarios.com)" =>"toxicity_a",
        "Toxicity (wiki)" =>"toxicity_b",
        "General Description" =>"description",
        "Descripcion JEFCA" =>"jefca_description",
        "Posibles efectos adversos" =>"side_effects"
        ,"ADI (admisible diary intake)" =>"adi",
        "InfoToReport" =>"info_to_report",
        "Referencias" =>"references",
        "Observaciones" =>"observations",
        "sinonimos" => "sinonimos"
    };
    return match source {
        Source::Ingredients => ingredient_mapping,
        Source::Products => product_mapping,
    };
}
pub fn return_mapping(source: Source) -> HashMap<String, String> {
    let product_mapping: HashMap<String, String> = hmap! {"Codigo"=> "codigo",
    "Descripcion"=> "descripcion",
    "presentacion"=> "presentacion",
    "Rubro" => "rubro_id",
    "Observaciones"=> "observaciones",
    "Numero_Ingredientes"=> "numero_ingredientes",
    "Ingredient 1"=> "ingredient 1",
    "Ingredient 2"=> "ingredient 2",
    "Ingredient 3"=> "ingredient 3",
    "Ingredient 4"=> "ingredient 4",
    "Ingredient 5"=> "ingredient 5",
    "Ingredient 6"=> "ingredient 6",
    "Ingredient 7"=> "ingredient 7",
    "Ingredient 8"=> "ingredient 8",
    "Ingredient 9"=> "ingredient 9",
    "Ingredient 10"=> "ingredient 10",
    "Ingredient 11"=> "ingredient 11",
    "Ingredient 12"=> "ingredient 12",
    "Ingredient 13"=> "ingredient 13",
    "Ingredient 14"=> "ingredient 14",
    "Ingredient 15"=> "ingredient 15",
    "Ingredient 16"=> "ingredient 16",
    "Ingredient 17"=> "ingredient 17",
    "Ingredient 18"=> "ingredient 18",
    "Ingredient 19"=> "ingredient 19",
    "Ingredient 20"=> "ingredient 20",
    "Ingredient 21"=> "ingredient 21",
    "Ingredient 22"=> "ingredient 22",
    "Ingredient 23"=> "ingredient 23",
    "Ingredient 24"=> "ingredient 24",
    "Ingredient 25"=> "ingredient 25",
    "Ingredient 26"=> "ingredient 26",
    "Ingredient 27"=> "ingredient 27",
    "Ingredient 28"=> "ingredient 28",
    "Ingredient 29"=> "ingredient 29",
    "Ingredient 30"=> "ingredient 30",
    "Ingredient 31"=> "ingredient 31",
    "Ingredient 32"=> "ingredient 32",
    "Ingredient 33"=> "ingredient 33",
    "Ingredient 34"=> "ingredient 34",
    "Ingredient 35"=> "ingredient 35",
    "Ingredient 36"=> "ingredient 36",
    "Ingredient 37"=> "ingredient 37",
    "Ingredient 38"=> "ingredient 38",
    "Ingredient 39"=> "ingredient 39",
    "Ingredient 40"=> "ingredient 40",
    "Ingredient 41"=> "ingredient 41",
    "Ingredient 42"=> "ingredient 42",
    "Ingredient 43"=> "ingredient 43",
    "Ingredient 44"=> "ingredient 44",
    "Ingredient 45"=> "ingredient 45",
    "Ingredient 46"=> "ingredient 46",
    "Ingredient 47"=> "ingredient 47",
    "Ingredient 48"=> "ingredient 48",
    "Ingredient 49"=> "ingredient 49",
    "Ingredient 50"=> "ingredient 50",
    "Ingredient 51"=> "ingredient 51",
    "Ingredient 52"=> "ingredient 52",
    "Ingredient 53"=> "ingredient 53",
    "Ingredient 54"=> "ingredient 54",
    "Ingredient 55"=> "ingredient 55",
    "Ingredient 56"=> "ingredient 56",
    "Unnamed=> 62"=> "unnamed=> 62",
    "Unnamed=> 63"=> "unnamed=> 63",
    "Unnamed=> 64"=> "unnamed=> 64",
    "Unnamed=> 65"=> "unnamed=> 65",
    "Unnamed=> 66"=> "unnamed=> 66"};
    let ingredient_mapping: HashMap<String, String> = hmap! {"COSING Ref No" => "COSING Ref No",
    "INCI name"=> "INCI name",
    "INN name"=> "INN name",
    "Ph. Eur. Name"=> "Ph. Eur. Name",
    "CAS No"=> "CAS No",
    "EC No"=> "EC No",
    "NamexCas"=> "NamexCas",
    "NamexEC"=> "NamexEC",
    "NamexName"=> "NamexName",
    "Mix"=> "Mix",
    "Anexo.iii.name"=> "Anexo.iii.name",
    "Anexo.iii.EC"=> "Anexo.iii.EC",
    "Anexo.iii.CAS"=> "Anexo.iii.CAS",
    "Chem/IUPAC Name / Description"=> "Chem/IUPAC Name / Description",
    "nchar"=> "nchar",
    "Synonyms.formatx"=> "synonyms",
    "-"=> "-",
    "Name to Compare \"Tool\" (Risk databases)"=> "actual_name",
    "Restriction"=> "Restriction",
    "Function"=> "Function",
    "Anexo.iii.Criteria"=> "Anexo.iii.Criteria",
    "Info para Reporte"=> "info_para_reporte",
    "Update Date"=> "Update Date",
    "Observaciones"=> "Observaciones",
    "Citas"=> "cita",
    "Group.Cancer"=> "Group.Cancer",
    "Ref.Cancer"=> "Ref.Cancer",
    "Volume.Cancer"=> "Volume.Cancer",
    "Year.Cancer"=> "Year.Cancer",
    "Add Info.Cancer"=> "Add Info.Cancer",
    "Add Info.Dev"=> "Add Info.Dev",
    "Ref.Dev"=> "Ref.Dev",
    "Group.Endoc"=> "Group.Endoc",
    "Ref.Toxicity.Allergies"=> "Ref.Toxicity.Allergies",
    "Add Info.Toxicity.Allergies"=> "Add Info.Toxicity.Allergies",
    "Add Info.Total/partial use restrictions"=> "Add Info.Total/partial use restrictions",
    "Ref.Endoc"=> "Ref.Endoc",
    "Ref.Total/partial use restrictions"=> "Ref.Total/partial use restrictions",
    "Ref.Env"=> "Ref.Env",
    "Add Info.Env"=> "Add Info.Env",
    "Cancer.Risk"=> "cancer_risk",
    "Development.Risk"=> "development_risk",
    "Allergies.Risk"=> "allergies_risk",
    "Endocryne.Risk"=> "endocryne_risk",
    "Prohibited.Risk"=> "prohibited_risk",
    "Env.Risk"=> "env_risk",
    "Total.Risk"=> "total_risk"};
    return match source {
        Source::Ingredients => ingredient_mapping,
        Source::Products => product_mapping,
    };
}
